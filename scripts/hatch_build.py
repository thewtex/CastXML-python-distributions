from hatchling.builders.hooks.plugin.interface import BuildHookInterface
import platform

import pooch
from pathlib import Path
from castxml.__about__ import __version__
import json

CASTXML_BINARIES_IPFS_CID = 'bafybeiaj4un7oiwwbz5v22k5pwqovjebt47myflxm3tkofnupd23qtwava'

class CustomBuildHook(BuildHookInterface):

    def initialize(self, version, build_data):
        print(version)
        print(build_data)
        print(__version__)


        package_dir = Path(__file__).resolve().parent
        extract_dir = Path("castxml") / Path("data")

        system = platform.system()
        system_id = ''
        machine = platform.machine()
        machine_id = ''
        if system == "Linux":
            system_id = 'linux'
            if machine == "x86_64":
                machine_id = '.tar.gz'
            else:
                raise RuntimeError(f"Unsupported machine {machine}")
        else:
            raise RuntimeError(f"Unsupported system {system}")

        tarball = f"castxml-{system_id}{machine_id}"
        package_data_dir = package_dir / extract_dir
        # Generated by scripts/update_castxml_version.py
        hashes_file = Path(__file__).resolve().parent / "binary_hashes.json"
        with open(hashes_file, 'r') as fp:
            binary_hashes = json.load(fp)
        castxml_data = pooch.create(path=package_dir,
            base_url=f"https://{CASTXML_BINARIES_IPFS_CID}.ipfs.w3s.link/ipfs/{CASTXML_BINARIES_IPFS_CID}/castxml/v{__version__}/",
            registry= {
                tarball: f"sha256:{binary_hashes[system_id][machine_id]}",
            },
            retry_if_failed=5
            )
        if system == "Windows":
            untar = pooch.Unzip(extract_dir=extract_dir)
        else:
            untar = pooch.Untar(extract_dir=extract_dir)
        castxml_data.fetch(tarball, processor=untar)